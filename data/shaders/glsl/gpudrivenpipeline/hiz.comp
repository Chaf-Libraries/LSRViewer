#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 0, r32f) uniform image2D result_image;

layout (binding = 1) uniform sampler2D input_image;

layout(push_constant) uniform PushConsts {
	vec2 reduce_data;
} reduce;


void main()
{
   	uvec2 pos = gl_GlobalInvocationID.xy;

	// Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
	float depth_1 = texture(input_image, vec2(float(pos.x)/reduce.reduce_data.x, float(pos.y)/reduce.reduce_data.y)).x;
	float depth_2 = texture(input_image, vec2(float(pos.x)/reduce.reduce_data.x, float(pos.y+1)/reduce.reduce_data.y)).x;
	float depth_3 = texture(input_image, vec2(float(pos.x+1)/reduce.reduce_data.x, float(pos.y)/reduce.reduce_data.y)).x;
	float depth_4 = texture(input_image, vec2(float(pos.x+1)/reduce.reduce_data.x, float(pos.y+1)/reduce.reduce_data.y)).x;
    float depth = max(max(depth_1, depth_2), max(depth_3, depth_4));
	imageStore(result_image, ivec2(pos), vec4(depth));
}