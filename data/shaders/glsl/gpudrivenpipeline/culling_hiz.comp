#version 450

struct InstanceData 
{
	vec3 min_;
    vec3 max_;
};

// Binding 0: Instance input data for culling
layout (binding = 0) buffer Instances 
{
   InstanceData instances[ ];
};

// Same layout as VkDrawIndexedIndirectCommand
struct IndexedIndirectCommand 
{
	uint indexCount;
	uint instanceCount;
	uint firstIndex;
	uint vertexOffset;
	uint firstInstance;
};

// Binding 1: Multi draw output
layout (binding = 1, std430) buffer IndirectDraws
{
	IndexedIndirectCommand indirectDraws[ ];
};

// Binding 2: Uniform block object with matrices
layout (binding = 2) uniform UBO 
{
	mat4 projection;
	mat4 view;
	vec4 lightPos;
	vec4 viewPos;
    vec4 frustum[6];
    vec4 range;
} ubo;

// Binding 3: Indirect draw stats
layout (binding = 3) buffer UBOOut
{
	uint drawCount[ ];
} uboOut;

// Binding 4: occlusion query result buffer
layout (binding = 4) buffer QueryResult
{
	uint queryResult[ ];
};

// Binding 5: hierarchy z image
layout (binding = 5) uniform sampler2D hiz_image;

layout (local_size_x = 32) in;

// Binding 6: debug: read depth
layout (binding = 6) buffer DebugDepth
{
	float depth[ ];
} debugDepth;

// Binding 7: debug: calculate depth
layout (binding = 7) buffer DebugZ
{
	float Z[ ];
} debugZ;

// Frustum Culling for bounding sphere
bool checkSphere(vec3 pos, float radius)
{
    for (uint i = 0; i < 6; i++)
    {
        if ((ubo.frustum[i].x * pos.x) + (ubo.frustum[i].y * pos.y) + (ubo.frustum[i].z * pos.z) + ubo.frustum[i].w + radius < 0.0)
        {
            return false;
        }
    }
    return true;
}

// Frustum Culling for AABB
bool checkAABB(vec3 min_val, vec3 max_val)
{
	vec3 pos = (min_val + max_val)/2.0;
	float radius = length(min_val - max_val)/2.0;
    if(checkSphere(pos, radius))
    {
        return true;
    }
    else
    {
        for (uint i=0; i < 6; i++)
        {
            vec4 plane = ubo.frustum[i];
            vec3 plane_normal = { plane.x, plane.y, plane.z };
            float plane_constant = plane.w;

            vec3 axis_vert = { 0.0, 0.0, 0.0 };

            // x-axis
            axis_vert.x = plane.x < 0.0 ? min_val.x : max_val.x;

            // y-axis
            axis_vert.y = plane.y < 0.0 ? min_val.y : max_val.y;

            // z-axis
            axis_vert.z = plane.z < 0.0 ? min_val.z : max_val.z;

            if (dot(axis_vert, plane_normal) + plane_constant < 0.0)
            {
                return false;
            }
        }
    }
    return true;
}

bool projectSphere(vec3 center, float radius, out vec4 aabb, uint idx)
{
    if (center.z + radius > ubo.range.w)
	{
    	return false;
    }

	vec2 cx = -center.xz;
	vec2 vx = vec2(sqrt(dot(cx, cx) - radius * radius), radius);
	vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
	vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

	vec2 cy = -center.yz;
	vec2 vy = vec2(sqrt(dot(cy, cy) - radius * radius), radius);
	vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
	vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

	aabb = vec4(minx.x / minx.y * ubo.projection[0][0], miny.x / miny.y * ubo.projection[1][1], maxx.x / maxx.y * ubo.projection[0][0], maxy.x / maxy.y * ubo.projection[1][1]);
	aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

    //debugDepth.depth[idx]=idx;
    //debugZ.Z[idx]=idx;

	return true;
}

// Hiz Occlusion Culling
bool HizCheck(vec3 min_val, vec3 max_val, uint idx)
{
    min_val.y = -min_val.y;
    max_val.y = -max_val.y;

    // float radius = length(max_val - min_val)/2.0;
    // vec3 center = (min_val + max_val)/ 2.0;

    // center = (ubo.view * vec4(center,1.f)).xyz;

    // vec4 aabb;
    // if(projectSphere(center, radius, aabb, idx));
    // {
    //     float width = (aabb.z - aabb.x) * ubo.range.x;
    //     float height = (aabb.w - aabb.y) * ubo.range.y;

    //     float level = floor(log2(max(width, height)));

    //     // Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
        
    //     float depth = textureLod(hiz_image, (aabb.xy + aabb.zw) * 0.5, level).x;
    //     float depthSphere =  (center.z - radius)/ubo.range.w;

    //     debugDepth.depth[idx]=((ubo.range.w-ubo.range.z)*depth+1)/2+ubo.range.z;
    //     debugZ.Z[idx]=center.z + radius;

    //    //return depthSphere >= depth;
    
    // }

    // return true;

    mat4 PV =   ubo.projection*ubo.view;
    vec4 p[8];
    p[0] = PV * vec4(min_val.x, min_val.y, min_val.z, 1.0);
    p[1] = PV * vec4(min_val.x, min_val.y, max_val.z, 1.0);
    p[2] = PV * vec4(min_val.x, max_val.y, min_val.z, 1.0);
    p[3] = PV * vec4(min_val.x, max_val.y, max_val.z, 1.0);
    p[4] = PV * vec4(max_val.x, min_val.y, min_val.z, 1.0);
    p[5] = PV * vec4(min_val.x, min_val.y, max_val.z, 1.0);
    p[6] = PV * vec4(min_val.x, max_val.y, min_val.z, 1.0);
    p[7] = PV * vec4(min_val.x, max_val.y, max_val.z, 1.0);

    float min_x = p[0].x / p[0].w;
    float max_x = p[0].x / p[0].w;
    float min_y = p[0].y / p[0].w;
    float max_y = p[0].y / p[0].w;
    float min_z = (p[0].z) / abs(p[0].w);
    float max_z = (p[0].z) / abs(p[0].w);

    for(int i=1; i<8; i++)
    {
        min_x = min_x > p[i].x / p[i].w? p[i].x / p[i].w : min_x;
        max_x = max_x < p[i].x / p[i].w? p[i].x / p[i].w : max_x;
        min_y = min_y > p[i].y / p[i].w? p[i].y / p[i].w : min_y;
        max_y = max_y < p[i].y / p[i].w? p[i].y / p[i].w : max_y;
        min_z = min_z > (p[i].z) / abs(p[i].w)? (p[i].z) / abs(p[i].w) : min_z;
        max_z = max_z < (p[i].z) / abs(p[i].w)? (p[i].z) / abs(p[i].w) : max_z ;
    }

    min_x = min_x * 0.5 + 0.5;
    max_x = max_x * 0.5 + 0.5;
    min_y = min_y * 0.5 + 0.5;
    max_y = max_y * 0.5 + 0.5;

    float radius=length(vec3(min_x, min_y, min_z) - vec3(max_x, max_y, max_z)) / 2.0;

    min_x = clamp(min_x, 0, 1);
    max_x = clamp(max_x, 0, 1);
    min_y = clamp(min_y, 0, 1);
    max_y = clamp(max_y, 0, 1);

    float sphereSizeX=(max_x - min_x)*ubo.range.x;
    float sphereSizeY=(max_y - min_y)*ubo.range.y;
    if(sphereSizeX * sphereSizeY < 1)
    {
        return false;
    }

    vec2 uv = {(min_x + max_x) * 0.5, (min_y + max_y) * 0.5};
    float mipLevel = floor(log2(max(sphereSizeX, sphereSizeY)));

    float depth = textureLod(hiz_image, uv, mipLevel).r;
    
    float depthSphere = (max_z+min_z)/2;

    debugDepth.depth[idx] = depth;
    debugZ.Z[idx] = depthSphere;

    if(min_z < depth)
    {
        return true;
    }
    else
    {
        return false;
    }
}

void main()
{
	uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;

    HizCheck(instances[idx].min_, instances[idx].max_, idx);
    if(checkAABB(instances[idx].min_, instances[idx].max_))
    {
        if(HizCheck(instances[idx].min_, instances[idx].max_, idx))
        {
            indirectDraws[idx].instanceCount = 1;
            uboOut.drawCount[idx] = 1;
        }
        else
        {
            indirectDraws[idx].instanceCount = 0;
            uboOut.drawCount[idx] = 0;
        }

    }
    else
    {
        indirectDraws[idx].instanceCount = 0;
        uboOut.drawCount[idx] = 0;
    }
}